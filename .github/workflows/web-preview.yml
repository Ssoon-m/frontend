name: Web preview workflow

env:
  CACHED_DEPENDENCY_PATHS: '**/node_modules'
  BUILD_CACHE_DEPENDENCY_KEYS: ${{ github.sha }}-web-preview

on:
  pull_request:
    types: [opened, synchronize]
    paths:
      - 'apps/web/**'
      - 'packages/**'
      - .npmrc
      - .nvmrc
      - '*.config.js'
      - .github/workflows/web-preview.yml

jobs:
  job_install_dependencies:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Compute dependencies hash key
        id: compute_lockfile_hash
        # run: echo "::set-output name=key::${{ hashFiles('**/yarn.lock') }}"
        run: echo "key=${{ hashFiles('**/yarn.lock') }}" >> $GITHUB_OUTPUT

      - name: Restore node_modules cache
        id: restore_dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ runner.os }}-modules-${{ steps.compute_lockfile_hash.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-modules-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.restore_dependencies.outputs.cache-hit != 'true'
        run: yarn install
    outputs:
      dependencies_cache_key: ${{ runner.os }}-modules-${{ steps.compute_lockfile_hash.outputs.key }}

  job_lint:
    name: Lint
    needs: job_install_dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Check dependencies cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_dependencies.outputs.dependencies_cache_key }}

      - name: Lint
        run: yarn lint

  job_build:
    name: Build
    needs: job_install_dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Check dependencies cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_dependencies.outputs.dependencies_cache_key }}

      - name: Restore bundle
        id: restore_bundle
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ env.BUILD_CACHE_DEPENDENCY_KEYS }}-${{ github.ref_name }}

      - name: Build DEV bundle
        if: steps.restore_bundle.outputs.cache-hit != 'true'
        run: yarn build --filter=web...

  job_deploy_preview:
    name: Deploy to Preview
    needs: [job_install_dependencies, job_lint, job_build]
    runs-on: ubuntu-latest
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_WEB_PROJECT_ID }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Check bundle cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ env.BUILD_CACHE_DEPENDENCY_KEYS }}-${{ github.ref_name }}

      - name: Build DEV bundle
        run: yarn build --filter=web... # 무조건 풀 캐싱 적용 되는 부분임, pull 직전에 turbo run build를 해줘야 종속성이 안 꼬임

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }} > web_deployment_url.txt

      - name: Read web URL from file
        id: read-url
        run: |
          url=$(cat web_deployment_url.txt)
          echo "PREVIEW_URL=${url}" >> $GITHUB_OUTPUT

      - name: Create Pull Request Comment
        uses: actions/github-script@v6
        if: ${{ success() }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.payload.pull_request.number;
            const url = "${{ steps.read-url.outputs.PREVIEW_URL }}";
            const { data: comment } = await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              body: `**The latest updates on your projects.** Learn more about [Vercel for Git ↗︎](https://vercel.link/github-learn-more)
              |Name | Preview|
              |:---|:---|
              |handpyeon-web | [Visit Preview](${url}) |`,
            });
            console.log(`Comment created: ${comment.html_url}`);
