name: Vercel Admin Preview

env:
  CACHED_DEPENDENCY_PATHS: "**/node_modules"
  BUILD_CACHE_DEPENDENCY_KEYS: bundle-key
  CACHED_BUILD_PATH: ${{ github.workspace }}/apps/admin/.next
on:
  push:
    branches: ["main"]
  pull_request:
    types: [opened, synchronize]
    paths:
      - apps/admin/**
      - packages/**
      - turbo.json
      - .npmrc
      - .nvmrc
      - "*.config.js"
      - .github/workflows/admin-preview.yml

jobs:
  job_install_dependencies:
    name: Install dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2

      - name: Compute dependencies hash key
        id: compute_lockfile_hash
        run: echo "::set-output name=key::${{ hashFiles('**/yarn.lock') }}"

      - name: Restore node_modules cache
        id: restore_dependencies
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ runner.os }}-modules-${{ steps.compute_lockfile_hash.outputs.key }}
          restore-keys: |
            ${{ runner.os }}-modules-
            ${{ runner.os }}-

      - name: Install dependencies
        if: steps.restore_dependencies.outputs.cache-hit != 'true'
        run: yarn install

    outputs:
      dependencies_cache_key: ${{ runner.os }}-modules-${{ steps.compute_lockfile_hash.outputs.key }}

  Build-Prj:
    name: Build
    needs: job_install_dependencies
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Setup Node.js environment
        uses: actions/setup-node@v3
        with:
          node-version: 18
          cache: "yarn"

      - name: Check dependencies cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_dependencies.outputs.dependencies_cache_key }}

      - name: Check if .next folder changed
        id: check-next-folder
        run: |
          if git diff --name-only HEAD~1 HEAD | grep -q "^apps/admin/"; then
            echo "::set-output name=changed::true"
          else
            echo "::set-output name=changed::false"
          fi

      - name: Restore bundle
        if: steps.check-next-folder.outputs.changed == 'true'
        id: restore_bundle
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{BUILD_CACHE_DEPENDENCY_KEYS }}-${{ needs.job_install_dependencies.outputs.dependencies_cache_key }}

      - name: Build DEV bundle
        if: steps.restore_bundle.outputs.cache-hit != 'true'
        run: yarn build --filter=admin...

      - name: Lint
        run: yarn lint

  Admin-Deploy-Preview:
    needs: [job_install_dependencies, Build-Prj]
    runs-on: ubuntu-latest
    # defaults:
    #   run:
    #     working-directory: apps/admin
    env:
      VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
      VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID_ADMIN }}
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      # - name: Setup Node.js environment
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: 18
      #     cache: "yarn"

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Check dependency cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{ needs.job_install_dependencies.outputs.dependencies_cache_key }}

      - name: Check bundle cache
        uses: actions/cache@v3
        with:
          path: ${{ env.CACHED_DEPENDENCY_PATHS }}
          key: ${{BUILD_CACHE_DEPENDENCY_KEYS }}-${{ needs.job_install_dependencies.outputs.dependencies_cache_key }}

      - name: Build DEV bundle
        run: yarn build --filter=admin... # 무조건 풀 캐싱, pull 직전에 turbo run build를 해줘야 종속성 오류가 안 꼬임

      - name: Pull Vercel Environment Information
        run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      # - name: Print current directory contents
      #   run: ls node_modules

      - name: Build Project Artifacts
        run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

      - name: Print current directory contents after build
        run: ls

      - name: Deploy Project Artifacts to Vercel
        run: vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }}
